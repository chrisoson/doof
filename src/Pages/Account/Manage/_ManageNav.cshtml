@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="manage-nav">
    <li><a class="manage-nav__link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">@Localizer["profile"]</a></li>
    <li><a class="manage-nav__link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Email</a></li>
    <li><a class="manage-nav__link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">@Localizer["password"]</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins"><a id="external-login" class="manage-nav__link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">@Localizer["external-logins"]</a></li>
    }
    <li><a class="manage-nav__link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">@Localizer["two-factor"]</a></li>
    <li><a class="manage-nav__link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">@Localizer["personal-data"]</a></li>
</ul>
